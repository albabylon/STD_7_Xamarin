Бизнес-логика у вас будет на языке С#, а пользовательский интерфейс будет в основном описан с помощью языка XAML (рассмотрим дальше). 
Далее, при сборке и запуске вашего приложения под каждую платформу, этот один раз универсально описанный вами интерфейс, 
заданный на языке XAML, будет преобразован в нативный интерфейс каждой конкретной платформы


В основе Xamarin лежит фреймворк Mono, представляющий open-source реализацию .NET Framework. 
Mono может выполняться на разных платформах: LINUX, MacOS, Android (в основе которой тоже лежит линуксовое ядро, см. картинку выше), 
или iOS (Unix-подобное ядро, см. картинку).



Когда мы выполняем билд проекта в нашей IDE, происходит парсинг XAML-файлов, создается обычный С#-класс, 
который помещается в файл, имеющий расширение .g.cs, то есть у нас будет файл LoginPage.g.cs , который мы можем обнаружить в папке билда


Генерить полностью или частично интерфейс из XML-кода мы можем и динамически (в процессе выполнения программы).

Пример, когда такое может быть нужно: загрузка XML-кода из веб-сервиса, либо же ситуации, 
когда в зависимости от хода выполнения программы нам необходимо демонстрировать разный интерфейс в разных частях приложения.

Например, мы можем сделать так, чтобы на экране логина наша кнопка при нажатии меняла свой вид, подгружая новые значения свойств из XAML.

-----Расширения XAML-----
Нужны они для того, чтобы «пробрасывать» нужные нам значения из бизнес-логики на С# в XAML-представления и корректно их там отображать.


x:Static - ссылка на статические свойства, поля, перечисления enum,
позволяет передавать в страницу значения переменных и констант из кода С#.
x:Type - атрибут типа объекта
x:Array - создание массива объектов одного какого-либо типа
x:Null - присваивание атрибуту значения null
x:Reference - ссылки на именованные элементы страницы
StaticResource - ссылки на объекты
DynamicResource - отслеживание изменений ресурса
Binding - для установки связи между свойствами двух объектов (привязку данных рассмотрим позже)



В приложениях (как и на сайтах) часто возникает необходимость выводить на экран списки определенных сущностей (предметов) в виде массивов. 
Для этого и служат рассматриваемые здесь расширения: x:Array (определяет массив данных) и x:Type (определяет их тип).
<ListView.ItemsSource>
   <x:Array Type="{x:Type x:String}">
       <x:String>Кухня</x:String>
       <x:String>Ванная</x:String>
       <x:String>Гостиная</x:String>
       <x:String>Детская</x:String>
       <x:String>Прихожая</x:String>
   </x:Array>
</ListView.ItemsSource>


---Свои расширения XAML---
см. класс ButtonViewExtension.cs